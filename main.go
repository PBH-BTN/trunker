/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package main

import (
	"context"
	"os"
	"time"

	appConfig "github.com/PBH-BTN/trunker/biz/config"
	"github.com/PBH-BTN/trunker/biz/middleware"
	"github.com/PBH-BTN/trunker/biz/services/interval"
	"github.com/PBH-BTN/trunker/biz/services/peer"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/config"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	prometheus "github.com/hertz-contrib/monitor-prometheus"

	"github.com/hertz-contrib/pprof"
)

func main() {
	Init()
	options := []config.Option{
		server.WithTracer(prometheus.NewServerTracer(":9091", "/metrics")),
		server.WithHostPorts(appConfig.AppConfig.Tracker.HostPorts),
		server.WithExitWaitTime(time.Minute),
	}
	if appConfig.AppConfig.Tracker.UseUnixSocket {
		options = append(options, server.WithNetwork("unix"))
	}
	h := server.Default(options...)
	if os.Getenv("RUN_ENV") == "prod" {
		hlog.SetLevel(hlog.LevelInfo)
	}
	pprof.Register(h)
	register(h)
	h.Use(middleware.LogSlowQuery)

	h.Engine.OnShutdown = append(h.Engine.OnShutdown, func(_ context.Context) {
		// here save current data
		peer.GetPeerManager().StoreToPersist()
	})
	interval.StartIntervalTask()
	h.Spin()
}
